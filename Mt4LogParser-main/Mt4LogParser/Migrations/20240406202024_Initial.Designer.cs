// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mt4LogParser.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mt4LogParser.Migrations
{
    [DbContext(typeof(Mt4Context))]
    [Migration("20240406202024_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Account")
                        .HasColumnType("integer");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Device")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FirstLoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsInvestor")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MetaId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfLogins")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfOrders")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Account");

                    b.HasIndex("Cid");

                    b.HasIndex("Device");

                    b.HasIndex("IpAddress");

                    b.HasIndex("IsInvestor");

                    b.HasIndex("LastLoginTime");

                    b.HasIndex("MetaId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbError", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("MetaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.HasIndex("Timestamp");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbMonitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Connections")
                        .HasColumnType("integer");

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<int>("FreeMemory")
                        .HasColumnType("integer");

                    b.Property<int>("Handles")
                        .HasColumnType("integer");

                    b.Property<int>("MaxMemoryBlock")
                        .HasColumnType("integer");

                    b.Property<long?>("MetaId")
                        .HasColumnType("bigint");

                    b.Property<int>("Net")
                        .HasColumnType("integer");

                    b.Property<int>("NetIn")
                        .HasColumnType("integer");

                    b.Property<int>("NetOut")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessCpu")
                        .HasColumnType("integer");

                    b.Property<int>("Sockets")
                        .HasColumnType("integer");

                    b.Property<int>("Threads")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.HasIndex("Timestamp");

                    b.ToTable("Monitoring");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Account")
                        .HasColumnType("integer");

                    b.Property<decimal>("Ask")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Bid")
                        .HasColumnType("numeric");

                    b.Property<int>("Entry")
                        .HasColumnType("integer");

                    b.Property<long?>("MetaId")
                        .HasColumnType("bigint");

                    b.Property<int>("Operation")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.HasIndex("Time");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("MetaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbActivity", b =>
                {
                    b.HasOne("Mt4LogParser.Models.Entities.DbMeta", "Meta")
                        .WithMany("Activities")
                        .HasForeignKey("MetaId");

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbError", b =>
                {
                    b.HasOne("Mt4LogParser.Models.Entities.DbMeta", "Meta")
                        .WithMany("Errors")
                        .HasForeignKey("MetaId");

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbMonitor", b =>
                {
                    b.HasOne("Mt4LogParser.Models.Entities.DbMeta", "Meta")
                        .WithMany("Monitors")
                        .HasForeignKey("MetaId");

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbOrder", b =>
                {
                    b.HasOne("Mt4LogParser.Models.Entities.DbMeta", "Meta")
                        .WithMany("Orders")
                        .HasForeignKey("MetaId");

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbState", b =>
                {
                    b.HasOne("Mt4LogParser.Models.Entities.DbMeta", "Meta")
                        .WithMany("States")
                        .HasForeignKey("MetaId");

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Mt4LogParser.Models.Entities.DbMeta", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Errors");

                    b.Navigation("Monitors");

                    b.Navigation("Orders");

                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
